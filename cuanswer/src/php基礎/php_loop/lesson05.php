<?php
//ここに果物のデータを格納した配列$usersがあります。
$users = [
    ['id' => 1, 'name' => '田中', 'age' => '男'],
    ['id' => 2, 'name' => '鈴木', 'age' => '男'],
    ['id' => 3, 'name' => '佐藤', 'age' => '女'],
    ['id' => 4, 'name' => '木村', 'age' => '男'],
    ['id' => 5, 'name' => '加藤', 'age' => '女']
];
//上記の配列から、任意のidを関数の引数に入れるとそのデータを返すような関数を作成し、
//呼び出したデータをループ文を使用して画面にテーブル表示させてください
//例)引数が0の時
//┏━━━━━┳━━━━━━━━┳━━━━━━━━┓
//┃　id ┃　name  ┃　age   ┃
//┣━━━━━╋━━━━━━━━╋━━━━━━━━┃
//┃  1  ┃  田中  ┃　 男   ┃
//┗━━━━━┻━━━━━━━━┻━━━━━━━━┛

function getUserById($users, $id) {
    foreach ($users as $user) {
        if ($user['id'] == $id) {
            return $user;
        }
    }
    return [];
}

// ポイント：関数名(配列, ID)となっていて引数が2つになっていること(3行目の$usersと19行目の$usersは別物→関数を呼び出したときの引数を19行目の引数に渡している)
// ポイント：ループ文（配列の場合なのでforeach文がベター）で連想配列ひとつひとつに対して繰り返し処理を行っているか
// ポイント：それぞれの連想配列のキー名が「id」の値が引数の$id（関数を呼び出した際の第二引数：今回の場合は「2」にあたる）と同じ場合「$user（現在のループの連想配列）」をreturnで返しているか

$user = getUserById($users, 2);

// ポイント：関数を呼び出して変数に代入しているか
?>

<table border="1" style="border-collapse: collapse;">
    <tr>
        <?php foreach ($user as $key => $value): ?>
            <td><?= $key ?></td>
        <?php endforeach ?>
        <!-- ポイント：取得した配列をループ文（配列の場合なのでforeach文がベター）でキーをそれぞれ表示しているかどうか -->
    </tr>
    <tr>
        <?php foreach ($user as $value): ?>
            <td><?= $value ?></td>
        <?php endforeach ?>
        <!-- ポイント：取得した配列をループ文（配列の場合なのでforeach文がベター）で値をそれぞれ表示しているかどうか -->
    </tr>
</table>
